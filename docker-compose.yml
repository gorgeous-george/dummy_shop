version: "3.9"

services:
  shop:
    container_name: shop
    build:
      context: .
      dockerfile: docker/shop/shop.Dockerfile
    volumes:
      - ./microservice_shop:/app
    networks:
      - celery_network
      - shop_db_network
      - nginx_network
    env_file:
      - shop.env
    ports:
      - "8000:8000"
    depends_on:
      - db_shop
      - redis
      - rabbitmq
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2

  storage:
    container_name: storage
    build:
      context: .
      dockerfile: ./docker/storage/storage.Dockerfile
    volumes:
      - ./microservice_storage:/app
    networks:
      - celery_network
      - storage_db_network
      - nginx_network
      - mailhog_network
    env_file:
      - storage.env
    ports:
      - "8001:8000"
    expose:
      - "8000"
    depends_on:
      - db_storage
      - rabbitmq
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2

  db_shop:
    container_name: db_shop
    image: postgres:14-alpine
    volumes:
      - db_shop_volume:/var/lib/postgresql/data
    networks:
      - shop_db_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'shop'

  db_storage:
    container_name: db_storage
    image: postgres:14-alpine
    volumes:
      - db_storage_volume:/var/lib/postgresql/data
    networks:
      - storage_db_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'storage'

  redis:
    container_name: redis
    image: redis:5.0.6-alpine
    restart: on-failure
    networks:
      - celery_network
    expose:
      - 6379
    volumes:
      - redis:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8.0-alpine
    restart: on-failure
    networks:
      - celery_network
    expose:
      - 4369
      - 5671
      - 5672
      - 15672
      - 25672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 5s
      timeout: 15s
      retries: 1

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: docker/shop/shop.Dockerfile
    volumes:
      - ./microservice_shop:/app
    networks:
      - shop_db_network
      - storage_db_network
      - celery_network
      - mailhog_network
    env_file:
      - shop.env
    depends_on:
      - shop
      - storage
      - rabbitmq
      - redis
    restart: on-failure
    environment:
      C_FORCE_ROOT: 'true'
      REDIS_URL: 'redis://redis:6379/0'
      REDIS_CACHE: 'redis:6379'
      AMQP_URL: 'amqp://rabbitmq:5672'
      CHECK_WEB: 'true'
      WEB_HOST: 'shop'
      WEB_PORT: '8000'
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2
    command: celery -A core worker -B -l INFO

  flower:
    image: mher/flower:0.9.5
    container_name: flower
    networks:
      - nginx_network
      - celery_network
    expose:
      - 5555
    depends_on:
      - celery
      - redis
      - db_storage
      - db_shop
    command: [ "--app core", "--port=5555", "--url_prefix=flower", "--broker=amqp://rabbitmq:5672", "--broker_api=amqp://rabbitmq:15672//" ]

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    command: [ "-smtp-bind-addr", "0.0.0.0:25" ]
    user: root
    restart: on-failure
    networks:
      - celery_network
      - nginx_network
      - mailhog_network
    expose:
      - 25
      - 8025
    healthcheck:
      test: [ "CMD", "echo", "|", "telnet", "127.0.0.1 25" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    restart: on-failure
    networks:
      - nginx_network
    ports:
      - 80:80
      - 8001:8001
      - 8025:8025
      - 5555:5555
    depends_on:
      - shop
      - storage
      - mailhog
      - flower

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - shop_db_network
      - storage_db_network
    restart: unless-stopped

networks:
  shop_db_network:
  storage_db_network:
  celery_network:
  nginx_network:
  mailhog_network:

volumes:
  db_shop_volume:
  db_storage_volume:
  rabbitmq_data:
  redis: